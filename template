#!/bin/sh

# 配置
REPO_URL="https://github.com/griffin928/homebrew-template.git"
WORK_DIR="$HOME/.brewtoolname"
FORMULA_FILE="homebrew-template.rb"
PACKAGE_NAME="homebrew-template"
GITHUB_USER="griffin928"
GITHUB_REPO="homebrew-template"
VERSION="v1.0.5"

# 获取当前版本号
get_current_version() {
    if [ "$VERSION" != "@@VERSION@@" ]; then
        echo "$VERSION"
    elif [ -f "$FORMULA_FILE" ]; then
        grep 'VERSION = ' "$FORMULA_FILE" | cut -d'"' -f2
    else
        echo "unknown"
    fi
}

# 命令处理函数
dev() {
    if [ ! -d "$WORK_DIR" ]; then
        echo "Creating development directory: $WORK_DIR"
        mkdir -p "$WORK_DIR"
        git clone "$REPO_URL" "$WORK_DIR"
        echo "Repository cloned to $WORK_DIR"
    else
        echo "Development directory already exists: $WORK_DIR"
        cd "$WORK_DIR" && git pull
        echo "Repository updated"
    fi
    echo "You can now develop the template in: $WORK_DIR"
}

# 获取下一个版本号
get_next_version() {
    # 从 formula 文件中获取当前版本号
    CURRENT_VERSION=$(get_current_version)
    
    # 提取版本号的各个部分
    MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1 | tr -d 'v')
    MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
    PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
    
    # 增加补丁版本号
    NEW_PATCH=$((PATCH + 1))
    
    # 返回新版本号
    echo "v$MAJOR.$MINOR.$NEW_PATCH"
}

# 从 GitHub 下载压缩包并计算 SHA256
get_github_archive_sha256() {
    VERSION=$1
    ARCHIVE_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/archive/refs/tags/${VERSION}.tar.gz"
    TEMP_FILE="/tmp/${PACKAGE_NAME}-${VERSION}.tar.gz"
    
    # 下载文件
    curl -sL "$ARCHIVE_URL" -o "$TEMP_FILE"
    
    # 计算 SHA256
    SHA256=$(shasum -a 256 "$TEMP_FILE" | cut -d' ' -f1)
    
    # 删除临时文件
    rm "$TEMP_FILE"
    
    echo "$SHA256"
}

publish() {
    # 确保在正确的目录
    if [ ! -f "$FORMULA_FILE" ]; then
        echo "Error: $FORMULA_FILE not found. Please run this command in the repository root."
        return 1
    fi

    # 获取新版本号
    NEW_VERSION=$(get_next_version)
    echo "Publishing version $NEW_VERSION..."

    # 更新 formula 文件中的版本号
    sed -i '' "s/VERSION = \".*\"/VERSION = \"$NEW_VERSION\"/" "$FORMULA_FILE"

    # 更新脚本中的版本号占位符
    sed -i '' "s/VERSION=\"@@VERSION@@\"/VERSION=\"$NEW_VERSION\"/" "$0"

    # 提交版本更新
    git add "$FORMULA_FILE" "$0"
    git commit -m "chore: Bump version to $NEW_VERSION"
    
    # 创建新的 tag
    git tag "$NEW_VERSION"
    
    # 推送更改和标签
    git push && git push --tags
    
    # 等待 GitHub 生成压缩包
    echo "Waiting for GitHub to generate the archive..."
    sleep 5
    
    # 获取 GitHub 生成的压缩包的 SHA256
    SHA256=$(get_github_archive_sha256 "$NEW_VERSION")
    
    # 更新 formula 文件中的 SHA256
    sed -i '' "s/sha256 \".*\"/sha256 \"$SHA256\"/" "$FORMULA_FILE"

    # 提交 SHA256 更新
    git add "$FORMULA_FILE"
    git commit -m "chore: Update SHA256 for version $NEW_VERSION"
    git push

    echo "Version $NEW_VERSION published successfully!"
    echo "SHA256: $SHA256"
}

# 主命令处理
case "$1" in
    "dev")
        dev
        ;;
    "publish")
        publish
        ;;
    "-v"|"--version")
        echo "$(get_current_version)"
        ;;
    "")
        echo "Hello from template CLI tool!"
        ;;
    *)
        echo "Unknown command: $1"
        echo "Available commands:"
        echo "  dev         - Clone/update repository for development"
        echo "  publish     - Publish a new version (auto-incrementing)"
        echo "  -v         - Show version"
        echo "  (none)      - Show welcome message"
        ;;
esac
