#!/bin/sh

# 工具名称配置
GITHUB_USER="griffin928"
TOOL_NAME="template"

# JetBrains 应用列表
JETBRAINS_APPS=("PyCharm" "GoLand" "IntelliJ IDEA" "IntelliJ IDEA CE" "WebStorm" "CLion" "PhpStorm" "RubyMine" "DataGrip")

# 配置
REPO_NAME="homebrew-${TOOL_NAME}"
REPO_URL="git@github.com-${TOOL_NAME}:${GITHUB_USER}/${REPO_NAME}.git"
WORK_DIR="$HOME/.${TOOL_NAME}"
FORMULA_FILE="${TOOL_NAME}.rb"
FORMULA_PATH="$WORK_DIR/$FORMULA_FILE"
PACKAGE_NAME="${TOOL_NAME}"
GITHUB_REPO="${REPO_NAME}"
VERSION="v1.0.64"

# 新增全局变量，用于版本计算
NEXT_VERSION_TEMPLATE="v\$MAJOR.\$MINOR.\$PATCH"

# 存储加密后的 SSH 私钥内容
ENCRYPTED_SSH_KEY="LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tCgpqQTBFQ1FNSVc0bWNMbnJNT2N6KzBzQ1JBUTR4blJYZk83S201TktUQnJUcTNMbFVrTldJbEZSVitxR0c3U3l6ClV5NHBWQnF5cmV5S2pzejQveW9qem9BUTJSMlRjRTF5bWtxWElSUUd4Q0VwcXBHTHBmZkFwb25IOGZjUDNRUXgKdThxNUVaS2ZzYU1TSk9Ic2tiWHZadnV4ZlBNSG9rMlpWMGRpSkNXWWJqdEh5YzBNUmdFdmxodVkrdlVIcXV5NgphcTVQb1ovTkZxUEQyUm9hRENVZHV4WEVrNHZ5TUtpczBuNzBEZVQ0S1dwNGpjZUxEbDZzNGFWV29NN3J2SGd6CmpveHJ3RU85WFlndmN3VVpKTHVka0psM214M05hbm9GZXhLeVc1Zmxvc1lhaVhiTTJleVNXcmMrVTIyeEtLZkIKMjFjZWZkdkFzZ3NWYTB3TWFMM3czbEE4V1Rld3NYQzRsdmhkVUdnRXJJWEFBVnBwZXdMZlJMaTJBTW9vVXVVVAoyOG52UjU3Y09vamJ0U28xdlpCVUNDSWt3QUFDVjZ6Yzg4TGhQYTFiL1lJS0RYalBmajhSd0tITk1LTjVkMzJZCmhDRHhrT0V0T292dDUwM0JSTnl2R2pZbVBRPT0KPVYxM3QKLS0tLS1FTkQgUEdQIE1FU1NBR0UtLS0tLQo="

# 显示帮助信息
show_help() {
    echo "Usage: ${TOOL_NAME} [command]"
    echo ""
    echo "Commands:"
    echo "  dev         Clone/update repository for development"
    echo "  publish     Publish a new version (auto-incrementing)"
    echo "  upgrade     Force upgrade to the latest version"
    echo "  -v          Show version"
    echo "  -h          Show this help message"
    echo "  storessh    加密并存储 SSH 私钥"
    echo "  restoressh  解密并使用 SSH 私钥"
    echo ""
    echo "在新电脑上首次使用的步骤:"
    echo "  1. 安装工具: brew tap ${GITHUB_USER}/${TOOL_NAME} && brew install ${TOOL_NAME}"
    echo "  2. 设置 SSH 密钥: ${TOOL_NAME} restoressh"
    echo "  3. 克隆开发仓库: ${TOOL_NAME} dev"
}

# 检查并安装必要的工具
check_and_install_tools() {
    # 第一个参数是工具列表，以空格分隔
    tools_to_check="$1"
    
    # 检查是否已安装必要的工具
    missing_tools=()
    for tool in $tools_to_check; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    # 如果有缺少的工具，提示安装
    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo "错误：缺少必要的工具：${missing_tools[*]}"
        echo "是否安装这些工具？(按回车或输入y继续安装，输入n退出)"
        read -r install_choice
        
        if [ -z "$install_choice" ] || [ "$install_choice" = "y" ] || [ "$install_choice" = "Y" ]; then
            echo "正在安装必要的工具..."
            
            # 检查是否有 Homebrew
            if ! command -v brew >/dev/null 2>&1; then
                echo "未找到 Homebrew，正在安装..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                
                # 添加 Homebrew 到 PATH（如果需要）
                if ! command -v brew >/dev/null 2>&1; then
                    echo "Homebrew 安装完成，但需要添加到 PATH"
                    if [ -f "/opt/homebrew/bin/brew" ]; then
                        eval "$(/opt/homebrew/bin/brew shellenv)"
                    elif [ -f "/usr/local/bin/brew" ]; then
                        eval "$(/usr/local/bin/brew shellenv)"
                    else
                        echo "无法找到 brew 命令，请手动添加 Homebrew 到 PATH"
                        return 1
                    fi
                fi
            fi
            
            # 使用 Homebrew 安装缺少的工具
            for tool in "${missing_tools[@]}"; do
                echo "安装 $tool..."
                brew install "$tool"
                
                # 检查安装是否成功
                if ! command -v "$tool" >/dev/null 2>&1; then
                    echo "安装 $tool 失败，请手动安装"
                    return 1
                fi
            done
            
            echo "所有必要的工具已安装完成"
            return 0
        else
            echo "已取消安装，退出"
            return 1
        fi
    fi
    
    # 如果没有缺少的工具，直接返回成功
    return 0
}

# 创建 SSH 目录并设置权限
setup_ssh_dir() {
    SSH_DIR="$HOME/.ssh"
    mkdir -p "$SSH_DIR"
    chmod 700 "$SSH_DIR"
    return 0
}

# 获取当前版本号
get_current_version() {
    if [ -f "$FORMULA_PATH" ]; then
        grep 'VERSION = ' "$FORMULA_PATH" | cut -d'"' -f2
    elif [ -n "$VERSION" ] && [ "$VERSION" != "@@VERSION@@" ]; then
        echo "$VERSION"
    else
        echo "unknown"
    fi
}

# 命令处理函数
dev() {
    # 检查是否已安装必要的工具
    if ! check_and_install_tools "git gpg curl"; then
        return 1
    fi
    
    if [ ! -d "$WORK_DIR" ]; then
        echo "创建开发目录: $WORK_DIR"
        mkdir -p "$WORK_DIR"
        
        # 检查 SSH 私钥文件是否存在
        setup_ssh_dir
        SSH_KEY_FILE="$SSH_DIR/id_ed25519_${TOOL_NAME}"
        if [ ! -f "$SSH_KEY_FILE" ]; then
            echo "未找到 SSH 私钥文件，需要先运行 restoressh 命令设置 SSH 密钥"
            echo "正在自动调用 restoressh..."
            restoressh
            
            # 如果 restoressh 失败，则退出
            if [ $? -ne 0 ]; then
                echo "SSH 密钥设置失败，无法继续"
                # 删除可能部分创建的目录
                [ -d "$WORK_DIR" ] && rm -rf "$WORK_DIR"
                return 1
            fi
        fi
        
        # 克隆仓库
        echo "克隆仓库: $REPO_URL"
        if ! git clone "$REPO_URL" "$WORK_DIR"; then
            echo "克隆仓库失败，可能需要先运行 restoressh 命令设置 SSH 密钥"
            echo "请运行: $0 restoressh"
            # 删除可能部分创建的目录
            [ -d "$WORK_DIR" ] && rm -rf "$WORK_DIR"
            return 1
        fi
        
        echo "仓库已克隆到 $WORK_DIR"
    else
        echo "开发目录已存在: $WORK_DIR"
        cd "$WORK_DIR" || return 1
        
        # 确保远程 URL 是正确的
        git remote set-url origin "$REPO_URL"
        
        # 拉取最新更改
        echo "拉取最新更改..."
        git pull
        
        if [ $? -ne 0 ]; then
            echo "拉取更改失败，可能需要运行 restoressh 命令更新 SSH 密钥"
            echo "请运行: $0 restoressh"
            return 1
        fi
    fi
    
    # 检查公式文件是否存在
    if [ ! -f "$FORMULA_PATH" ]; then
        echo "注意：$FORMULA_PATH 未找到。这可能是正常的，如果这是一个新仓库。"
        echo "如果需要，您可以创建这个文件。"
    else
        echo "公式文件已存在: $FORMULA_PATH"
    fi
    
    # 设置 Git 用户信息（如果未设置）
    if [ -z "$(git -C "$WORK_DIR" config user.name)" ]; then
        echo "设置 Git 用户名..."
        read -p "请输入您的 Git 用户名: " git_user_name
        git -C "$WORK_DIR" config user.name "$git_user_name"
    fi
    
    if [ -z "$(git -C "$WORK_DIR" config user.email)" ]; then
        echo "设置 Git 邮箱..."
        read -p "请输入您的 Git 邮箱: " git_user_email
        git -C "$WORK_DIR" config user.email "$git_user_email"
    fi
    
    echo "开发环境已准备就绪"
    echo "工作目录: $WORK_DIR"
    echo "当前版本: $(get_current_version)"
    echo ""
    echo "您可以使用以下命令进行开发:"
    echo "  cd $WORK_DIR        # 进入工作目录"
    echo "  $0 publish          # 发布新版本"
    echo "  $0 restoressh       # 如果需要，更新 SSH 密钥"
    
    # 打开编辑器（如果有）
    if [ -n "$EDITOR" ]; then
        echo "正在打开编辑器: $EDITOR $WORK_DIR"
        $EDITOR "$WORK_DIR"
    elif command -v code >/dev/null 2>&1; then
        echo "正在打开 Visual Studio Code..."
        code "$WORK_DIR"
    else
        # 检查是否有 JetBrains IDE
        for app in "${JETBRAINS_APPS[@]}"; do
            app_path="/Applications/$app.app"
            if [ -d "$app_path" ]; then
                echo "正在打开 $app..."
                open -a "$app" "$WORK_DIR"
                break
            fi
        done
    fi
    
    return 0
}

# 强制升级到最新版本
upgrade() {
    echo "Upgrading ${TOOL_NAME} to the latest version..."
    
    # 先卸载包（如果已安装）
    if brew list "${PACKAGE_NAME}" >/dev/null 2>&1; then
        echo "Uninstalling current version..."
        brew uninstall "${PACKAGE_NAME}" || {
            echo "Error: Failed to uninstall current version"
            return 1
        }
    fi
    
    # 卸载 tap（如果存在）
    if brew tap | grep -q "^${GITHUB_USER}/${TOOL_NAME}\$"; then
        echo "Removing tap..."
        brew untap "${GITHUB_USER}/${TOOL_NAME}" || {
            echo "Error: Failed to remove tap"
            return 1
        }
    fi
    
    # 清理所有缓存
    echo "Cleaning up cache..."
    brew cleanup "${PACKAGE_NAME}" 2>/dev/null || true
    
    # 更新 Homebrew
    echo "Updating Homebrew..."
    brew update || {
        echo "Error: Failed to update Homebrew"
        return 1
    }
    
    # 重新添加 tap
    echo "Adding tap..."
    brew tap "${GITHUB_USER}/${TOOL_NAME}" "https://github.com/${GITHUB_USER}/${REPO_NAME}.git" || {
        echo "Error: Failed to add tap"
        return 1
    }
    
    # 安装最新版本（强制从源安装）
    echo "Installing latest version..."
    HOMEBREW_NO_BOTTLE=1 brew install --build-from-source "${GITHUB_USER}/${TOOL_NAME}/${PACKAGE_NAME}" || {
        echo "Error: Failed to install latest version"
        return 1
    }
    
    # 显示新版本
    NEW_VERSION=$(${TOOL_NAME} -v)
    echo "Successfully upgraded to version: ${NEW_VERSION}"
}

# 获取下一个可用的版本号
get_next_available_version() {
    # 从 formula 文件中获取当前版本号
    CURRENT_VERSION=$(get_current_version)
    
    # 提取版本号的各个部分
    MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1 | tr -d 'v')
    MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
    PATCH=$(echo "$CURRENT_VERSION" | cut -d'.' -f3)
    
    # 增加补丁版本号直到找到未使用的版本号
    while true; do
        PATCH=$((PATCH + 1))
        # 使用全局模板变量而不是硬编码的版本号
        NEW_VERSION=$(eval echo "$NEXT_VERSION_TEMPLATE")
        
        # 检查本地标签
        if ! git tag | grep -q "^$NEW_VERSION\$"; then
            # 检查远程标签
            if ! git ls-remote --tags origin "refs/tags/$NEW_VERSION" | grep -q "refs/tags/$NEW_VERSION\$"; then
                # 找到一个未使用的版本号
                echo "$NEW_VERSION"
                return 0
            fi
        fi
        
        # 版本已存在，输出到标准错误而不是标准输出
        echo "版本 $NEW_VERSION 已存在，尝试下一个版本..." >&2
    done
}

# 从 GitHub 下载压缩包并计算 SHA256
get_github_archive_sha256() {
    VERSION=$1
    ARCHIVE_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/archive/refs/tags/${VERSION}.tar.gz"
    
    # 直接从 GitHub 下载并计算 SHA256
    SHA256=$(curl -sL "$ARCHIVE_URL" | shasum -a 256 | cut -d ' ' -f1)
    echo "$SHA256"
}

# 更新 Homebrew formula 文件
update_formula() {
    VERSION=$1
    SHA256=$2
    
    if [ -f "$FORMULA_PATH" ]; then
        # 更新版本号
        sed -i '' "s/VERSION = \".*\"/VERSION = \"$VERSION\"/" "$FORMULA_PATH"
        
        # 更新 SHA256
        sed -i '' "s/sha256 \".*\"/sha256 \"$SHA256\"/" "$FORMULA_PATH"
        
        echo "Formula 已更新: $FORMULA_PATH"
    else
        echo "错误: Formula 文件不存在: $FORMULA_PATH"
        return 1
    fi
}

publish() {
    echo "发布新版本..."
    
    # 确保在正确的目录
    cd "$WORK_DIR" || {
        echo "切换到工作目录失败: $WORK_DIR"
        return 1
    }
    
    # 获取当前版本
    CURRENT_VERSION=$(get_current_version)
    echo "当前版本: $CURRENT_VERSION"
    
    # 获取下一个可用版本
    VERSION=$(get_next_available_version)
    echo "新版本: $VERSION"
    
    # 更新公式文件中的版本号
    echo "更新公式文件..."
    
    # 首先更新脚本中的版本号
    echo "更新脚本版本号..."
    TOOL_PATH="$WORK_DIR/template"
    
    if [ -f "$TOOL_PATH" ]; then
        # 更新脚本中的 VERSION 变量
        sed -i '' "s/VERSION=\"v[0-9]*\.[0-9]*\.[0-9]*\"/VERSION=\"$VERSION\"/" "$TOOL_PATH"
        
        # 确保更新成功
        if ! grep -q "VERSION=\"$VERSION\"" "$TOOL_PATH"; then
            echo "警告：无法更新脚本中的版本号，请手动检查"
            echo "尝试使用更精确的模式匹配..."
            # 尝试另一种模式匹配方式
            sed -i '' "s/VERSION=\".*\"/VERSION=\"$VERSION\"/" "$TOOL_PATH"
            
            # 再次检查
            if ! grep -q "VERSION=\"$VERSION\"" "$TOOL_PATH"; then
                echo "错误：无法更新脚本版本号，发布过程中断"
                return 1
            fi
        fi
        
        echo "脚本版本号已更新为 $VERSION"
    else
        echo "错误：找不到脚本文件 $TOOL_PATH"
        return 1
    fi
    
    # 提交版本号更新
    git add .
    git commit -m "更新脚本版本号到 $VERSION"
    git push
    
    # 创建并推送标签
    echo "创建标签 $VERSION..."
    git tag "$VERSION"
    
    # 推送标签
    echo "推送标签 $VERSION..."
    git push origin "$VERSION"
    
    # 等待 GitHub 生成压缩包
    echo "等待 GitHub 生成压缩包..."
    
    # 设置最大重试次数和等待时间
    MAX_ATTEMPTS=10
    ATTEMPT=1
    DOWNLOAD_URL="https://github.com/$GITHUB_USER/$REPO_NAME/archive/refs/tags/$VERSION.tar.gz"
    
    # 使用重试机制获取稳定的 SHA256
    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        echo "尝试 $ATTEMPT/$MAX_ATTEMPTS 获取 SHA256..."
        
        # 直接从 GitHub 下载并计算 SHA256
        ACTUAL_SHA256=$(curl -sL "$DOWNLOAD_URL" | shasum -a 256 | cut -d ' ' -f1)
        
        # 检查是否获取到有效的 SHA256
        if [ -z "$ACTUAL_SHA256" ] || [ "$ACTUAL_SHA256" = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855" ]; then
            # 空文件或无效响应的 SHA256，等待并重试
            echo "  GitHub 压缩包尚未准备好，等待 5 秒后重试..."
            sleep 5
            ATTEMPT=$((ATTEMPT + 1))
            continue
        else
            # 获取到有效的 SHA256
            echo "  成功获取 SHA256: $ACTUAL_SHA256"
            break
        fi
    done
    
    if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
        echo "错误：无法获取有效的 SHA256 值，请稍后手动更新"
        return 1
    fi
    
    # 更新公式文件中的版本号和 SHA256
    echo "更新公式文件..."
    update_formula "$VERSION" "$ACTUAL_SHA256"
    
    echo "版本号已成功更新到 $VERSION"
    
    # 提交所有更改并推送
    echo "提交所有更改..."
    git add .
    git commit -m "发布版本 $VERSION 并更新 SHA256"
    git push
    
    echo "版本 $VERSION 已完全发布"
    echo "可以使用以下命令安装新版本："
    echo "  brew update && brew upgrade $PACKAGE_NAME"
    return 0
}

# 选择并加密 SSH 私钥
storessh() {
    echo "选择并加密 SSH 私钥..."
    
    # 检查工作目录是否存在
    if [ ! -d "$WORK_DIR" ]; then
        echo "错误：工作目录 $WORK_DIR 不存在"
        echo "请先运行 $TOOL_NAME dev 命令创建工作目录"
        return 1
    fi
    
    # 检查 gpg 是否安装
    if ! check_and_install_tools "gpg"; then
        return 1
    fi
    
    # 查找所有私钥文件
    setup_ssh_dir
    
    # 检查 SSH 目录是否存在
    if [ ! -d "$SSH_DIR" ]; then
        echo "错误：SSH 目录不存在，请先创建 SSH 密钥"
        echo "运行以下命令生成新密钥："
        echo "  ssh-keygen -t ed25519 -C \"your_email@example.com\""
        return 1
    fi
    
    # 列出所有私钥文件
    echo "可用的 SSH 私钥文件："
    KEY_FILES=()
    KEY_INDEX=1
    
    for key_file in "$SSH_DIR"/id_*; do
        # 跳过公钥和非文件
        if [[ "$key_file" == *.pub ]] || [ ! -f "$key_file" ]; then
            continue
        fi
        
        KEY_FILES+=("$key_file")
        echo "$KEY_INDEX) $(basename "$key_file")"
        KEY_INDEX=$((KEY_INDEX + 1))
    done
    
    if [ ${#KEY_FILES[@]} -eq 0 ]; then
        echo "未找到 SSH 私钥文件"
        return 1
    fi
    
    # 让用户选择私钥文件
    echo "请选择要加密的 SSH 私钥文件 (1-${#KEY_FILES[@]})："
    read -r SELECTED_INDEX
    
    # 验证输入
    if ! [[ "$SELECTED_INDEX" =~ ^[0-9]+$ ]] || [ "$SELECTED_INDEX" -lt 1 ] || [ "$SELECTED_INDEX" -gt ${#KEY_FILES[@]} ]; then
        echo "无效的选择"
        return 1
    fi
    
    SELECTED_KEY_FILE="${KEY_FILES[$((SELECTED_INDEX - 1))]}"
    echo "已选择: $SELECTED_KEY_FILE"
    
    # 让用户输入加密密码
    echo "请输入用于加密的密码："
    read -r -s ENCRYPTION_PASSWORD
    echo ""
    echo "请再次输入密码进行确认："
    read -r -s CONFIRM_PASSWORD
    echo ""
    
    if [ "$ENCRYPTION_PASSWORD" != "$CONFIRM_PASSWORD" ]; then
        echo "错误：两次输入的密码不匹配"
        return 1
    fi
    
    # 使用 gpg 加密私钥
    echo "正在加密 SSH 私钥..."
    ENCRYPTED_KEY=$(gpg --symmetric --batch --passphrase "$ENCRYPTION_PASSWORD" --armor < "$SELECTED_KEY_FILE" 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo "加密失败"
        return 1
    fi
    
    # 将加密后的内容进行 base64 编码，避免换行符和特殊字符的问题
    ENCODED_KEY=$(echo "$ENCRYPTED_KEY" | base64)
    
    # 更新脚本文件中的 ENCRYPTED_SSH_KEY 变量
    SCRIPT_FILE="$WORK_DIR/$TOOL_NAME"
    
    echo "更新脚本文件中的 ENCRYPTED_SSH_KEY 变量..."
    
    # 使用 sed 替换 ENCRYPTED_SSH_KEY 变量的值
    sed -i '' "s/^ENCRYPTED_SSH_KEY=.*$/ENCRYPTED_SSH_KEY=\"$ENCODED_KEY\"/" "$SCRIPT_FILE"
    
    # 设置正确的权限（保持执行权限）
    chmod 755 "$SCRIPT_FILE"
    
    echo "SSH 私钥已成功加密并保存到 $SCRIPT_FILE"
    
    return 0
}

# 解密 SSH 私钥并使用
restoressh() {
    # 从系统安装的 template 中读取 ENCRYPTED_SSH_KEY 变量
    # 查找系统安装的 template 路径
    SYSTEM_TEMPLATE=$(which template 2>/dev/null)
    
    if [ -z "$SYSTEM_TEMPLATE" ]; then
        echo "错误：未找到系统安装的 template 工具"
        echo "请确保 template 已正确安装并添加到 PATH 中"
        echo "安装命令: brew tap ${GITHUB_USER}/${TOOL_NAME} && brew install ${TOOL_NAME}"
        return 1
    fi
    
    echo "使用系统安装的 template: $SYSTEM_TEMPLATE"
    
    # 从系统安装的 template 中提取 ENCRYPTED_SSH_KEY 变量
    ENCRYPTED_SSH_KEY=$(grep "^ENCRYPTED_SSH_KEY=" "$SYSTEM_TEMPLATE" | cut -d'"' -f2)
    
    if [ -z "$ENCRYPTED_SSH_KEY" ]; then
        echo "错误：系统安装的 template 中未找到加密的 SSH 密钥"
        echo "请先运行 $TOOL_NAME storessh 命令加密 SSH 私钥"
        return 1
    fi
    
    # 检查必要工具
    if ! check_and_install_tools "gpg ssh-add ssh"; then
        return 1
    fi
    
    # 将加密后的内容进行 base64 解码
    DECODED_KEY=$(echo "$ENCRYPTED_SSH_KEY" | base64 --decode)
    
    # 让用户输入解密密码
    echo "请输入解密密码："
    read -r -s DECRYPTION_PASSWORD
    
    # 创建临时文件存储加密的密钥
    TEMP_ENCRYPTED_KEY=$(mktemp)
    
    # 写入加密的密钥到临时文件
    echo "$DECODED_KEY" > "$TEMP_ENCRYPTED_KEY"
    
    # 创建 SSH 目录（如果不存在）
    setup_ssh_dir
    
    SSH_KEY_FILE="$SSH_DIR/id_ed25519_${TOOL_NAME}"
    
    # 解密私钥并写入文件
    echo "正在解密 SSH 私钥..."
    gpg --batch --passphrase "$DECRYPTION_PASSWORD" --decrypt "$TEMP_ENCRYPTED_KEY" > "$SSH_KEY_FILE" 2>/dev/null
    
    if [ $? -ne 0 ]; then
        echo "解密失败，密码可能不正确"
        rm -f "$TEMP_ENCRYPTED_KEY"
        return 1
    fi
    
    # 清理临时文件
    rm -f "$TEMP_ENCRYPTED_KEY"
    
    # 设置正确的权限
    chmod 600 "$SSH_KEY_FILE"
    
    echo "SSH 私钥已解密并保存到 $SSH_KEY_FILE"
    
    # 将私钥添加到 SSH agent
    echo "正在将私钥添加到 SSH agent..."
    ssh-add -l &>/dev/null
    if [ $? -eq 2 ]; then
        # SSH agent 未运行，启动它
        echo "启动 SSH agent..."
        eval "$(ssh-agent)" &>/dev/null
    fi
    
    # 添加私钥到 SSH agent
    ssh-add "$SSH_KEY_FILE" 2>/dev/null
    if [ $? -ne 0 ]; then
        echo "警告：无法将私钥添加到 SSH agent，但将继续配置 SSH"
    else
        echo "私钥已成功添加到 SSH agent"
    fi
    
    # 更新 SSH 配置
    CONFIG_FILE="$SSH_DIR/config"
    
    # 如果配置文件不存在，创建它
    if [ ! -f "$CONFIG_FILE" ]; then
        touch "$CONFIG_FILE"
        chmod 600 "$CONFIG_FILE"
    fi
    
    # 检查是否已存在配置
    if grep -q "^Host github.com-${TOOL_NAME}$" "$CONFIG_FILE" 2>/dev/null; then
        # 删除现有配置并添加新配置
        TMP_FILE=$(mktemp)
        awk -v tool="$TOOL_NAME" -v key="$SSH_KEY_FILE" '
        BEGIN { skip = 0; host_found = 0; empty_line_before_host = 0; }
        
        # 记录空行
        /^$/ { empty_line_before_host = 1; }
        
        # 如果找到目标 Host，设置 skip 标志并记录已找到
        $0 ~ "^Host[[:space:]]+github.com-"tool"$" { 
            if (!host_found) {
                # 第一次找到目标 Host，输出新配置
                if (!empty_line_before_host) print "";
                print "Host github.com-"tool;
                print "    HostName github.com";
                print "    User git";
                print "    IdentityFile "key;
                print "    IdentitiesOnly yes";
                host_found = 1;
            }
            skip = 1; 
            empty_line_before_host = 0;
            next;
        }
        
        # 如果遇到新的 Host，停止跳过
        /^Host / { 
            skip = 0; 
            empty_line_before_host = 0;
        }
        
        # 如果不在跳过模式，输出行
        !skip { print $0; }
        
        # 在文件末尾，如果没有找到 Host，添加新配置
        END {
            if (!host_found) {
                print "";
                print "Host github.com-"tool;
                print "    HostName github.com";
                print "    User git";
                print "    IdentityFile "key;
                print "    IdentitiesOnly yes";
            }
        }
        ' "$CONFIG_FILE" > "$TMP_FILE"
        mv "$TMP_FILE" "$CONFIG_FILE"
    else
        # 添加新配置
        echo "" >> "$CONFIG_FILE"
        echo "Host github.com-${TOOL_NAME}" >> "$CONFIG_FILE"
        echo "    HostName github.com" >> "$CONFIG_FILE"
        echo "    User git" >> "$CONFIG_FILE"
        echo "    IdentityFile $SSH_KEY_FILE" >> "$CONFIG_FILE"
        echo "    IdentitiesOnly yes" >> "$CONFIG_FILE"
    fi
    
    # 设置正确的权限
    chmod 600 "$CONFIG_FILE"
    
    # 测试 SSH 连接
    echo "测试 SSH 连接..."
    SSH_TEST=$(ssh -T -o IdentitiesOnly=yes -o BatchMode=yes -o StrictHostKeyChecking=accept-new "git@github.com-${TOOL_NAME}" 2>&1)
    
    if echo "$SSH_TEST" | grep -q "successfully authenticated"; then
        USERNAME=$(echo "$SSH_TEST" | grep -o "Hi [^!]*" | cut -d' ' -f2)
        echo "  SSH 认证成功，用户名: $USERNAME"
        echo ""
        echo "现在您可以运行以下命令开始开发:"
        echo "  $0 dev"
        return 0
    else
        echo "  SSH 认证失败，请检查 SSH 密钥和配置"
        echo "  错误信息: $SSH_TEST"
        echo ""
        echo "可能的解决方法:"
        echo "  1. 确保您的 GitHub 账户已添加此 SSH 密钥"
        echo "  2. 检查网络连接"
        echo "  3. 尝试手动测试连接: ssh -T git@github.com-${TOOL_NAME}"
        return 1
    fi
}

# 主命令处理
case "$1" in
    "dev")
        dev
        ;;
    "publish")
        publish
        ;;
    "upgrade")
        upgrade
        ;;
    "storessh")
        storessh
        ;;
    "restoressh")
        restoressh
        ;;
    "-v")
        get_current_version
        ;;
    "-h"|"--help"|"")
        show_help
        ;;
    *)
        echo "未知命令: $1"
        show_help
        exit 1
        ;;
esac
